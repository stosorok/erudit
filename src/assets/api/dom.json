{
    "event-event": "Returns a new event whose type attribute value is set to type. The eventInitDict argument allows for setting the bubbles and cancelable attributes via object members of the same name.",
    "event-type": "Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".",
    "event-target": "Returns the object to which event is dispatched (its target).",
    "event-currenttarget": "Returns the object whose event listener's callback is currently being invoked.",
    "event-composedpath": "Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget.",
    "event-eventphase": "Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.",
    "event-stoppropagation": "When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.",
    "event-stopimmediatepropagation": "Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.",
    "event-bubbles": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
    "event-cancelable": "Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.",
    "event-preventdefault": "If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.",
    "event-defaultprevented": "Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.",
    "event-composed": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
    "event-istrusted": "Returns true if event was dispatched by the user agent, and false otherwise.",
    "event-timestamp": "Returns the event's timestamp as the number of milliseconds measured relative to the time origin.",
    "customevent-customevent": "Works analogously to the constructor for Event except that the eventInitDict argument now allows for setting the detail attribute too.",
    "customevent-detail": "Returns any custom data event was created with. Typically used for synthetic events.",
    "eventtarget-eventtarget": "Creates a new EventTarget object, which can be used by developers to dispatch and listen for events.",
    "eventtarget-addeventlistener": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in ยง 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.",
    "eventtarget-removeeventlistener": "Removes the event listener in target's event listener list with the same type, callback, and options.",
    "eventtarget-dispatchevent": "Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
    "abortcontroller-abortcontroller": "Returns a new controller whose signal is set to a newly created AbortSignal object.",
    "abortcontroller-signal": "Returns the AbortSignal object associated with this object.",
    "abortcontroller-abort": "Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.",
    "abortsignal-aborted": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.",
    "nonelementparentnode-getelementbyid": "Returns the first element within node's descendants whose ID is elementId.",
    "parentnode-children": "Returns the child elements.",
    "parentnode-firstelementchild": "Returns the first child that is an element, and null otherwise.",
    "parentnode-lastelementchild": "Returns the last child that is an element, and null otherwise.",
    "parentnode-prepend": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-append": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-replacechildren": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-queryselector": "Returns the first element that is a descendant of node that matches selectors.",
    "parentnode-queryselectorall": "Returns all element descendants of node that match selectors.",
    "nondocumenttypechildnode-previouselementsibling": "Returns the first preceding sibling that is an element, and null otherwise.",
    "nondocumenttypechildnode-nextelementsibling": "Returns the first following sibling that is an element, and null otherwise.",
    "childnode-before": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-after": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-replacewith": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-remove": "Removes node.",
    "nodelist-length": "Returns the number of nodes in the collection.",
    "nodelist-item": "Returns the node with index index from the collection. The nodes are sorted in tree order.",
    "htmlcollection-length": "Returns the number of elements in the collection.",
    "htmlcollection-item": "Returns the element with index index from the collection. The elements are sorted in tree order.",
    "htmlcollection-nameditem": "Returns the first element with ID or name name from the collection.",
    "mutationobserver-mutationobserver": "Constructs a MutationObserver object and sets its callback to callback. The callback is invoked with a list of MutationRecord objects as first argument and the constructed MutationObserver object as second argument. It is invoked after nodes registered with the observe() method, are mutated.",
    "mutationobserver-observe": "Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).\n\nThe options argument allows for setting mutation observation options via object members. These are the object members that can be used:",
    "mutationobserver-disconnect": "Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.",
    "mutationobserver-takerecords": "Empties the record queue and returns what was in there.",
    "mutationrecord-type": "Returns \"attributes\" if it was an attribute mutation. \"characterData\" if it was a mutation to a CharacterData node. And \"childList\" if it was a mutation to the tree of nodes.",
    "mutationrecord-target": "Returns the node the mutation affected, depending on the type. For \"attributes\", it is the element whose attribute changed. For \"characterData\", it is the CharacterData node. For \"childList\", it is the node whose children changed.",
    "mutationrecord-addednodes": "Return the nodes added and removed respectively.",
    "mutationrecord-removednodes": "Return the nodes added and removed respectively.",
    "mutationrecord-previoussibling": "Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.",
    "mutationrecord-nextsibling": "Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.",
    "mutationrecord-attributename": "Returns the local name of the changed attribute, and null otherwise.",
    "mutationrecord-attributenamespace": "Returns the namespace of the changed attribute, and null otherwise.",
    "mutationrecord-oldvalue": "The return value depends on type. For \"attributes\", it is the value of the changed attribute before the change. For \"characterData\", it is the data of the changed node before the change. For \"childList\", it is null.",
    "node-nodetype": "Returns the type of node, represented by a number from the following list:",
    "node-nodename": "Returns a string appropriate for the type of node, as follows:",
    "node-baseuri": "Returns node's node document's document base URL.",
    "node-isconnected": "Returns true if node is connected and false otherwise.",
    "node-ownerdocument": "Returns the node document. Returns null for documents.",
    "node-getrootnode": "Returns node's root.",
    "node-parentnode": "Returns the parent.",
    "node-parentelement": "Returns the parent element.",
    "node-haschildnodes": "Returns whether node has children.",
    "node-childnodes": "Returns the children.",
    "node-firstchild": "Returns the first child.",
    "node-lastchild": "Returns the last child.",
    "node-previoussibling": "Returns the previous sibling.",
    "node-nextsibling": "Returns the next sibling.",
    "node-normalize": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
    "node-clonenode": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
    "node-isequalnode": "Returns whether node and otherNode have the same properties.",
    "node-comparedocumentposition": "Returns a bitmask indicating the position of other relative to node. These are the bits that can be set:",
    "node-contains": "Returns true if other is an inclusive descendant of node, and false otherwise.",
    "document-document": "Returns a new document.",
    "document-implementation": "Returns document's DOMImplementation object.",
    "document-url": "Returns document's URL.",
    "document-documenturi": "Returns document's URL.",
    "document-compatmode": "Returns the string \"BackCompat\" if document's mode is \"quirks\", and \"CSS1Compat\" otherwise.",
    "document-characterset": "Returns document's encoding.",
    "document-contenttype": "Returns document's content type.",
    "document-doctype": "Returns the doctype or null if there is none.",
    "document-documentelement": "Returns the document element.",
    "document-getelementsbytagname": "If qualifiedName is \"*\" returns a HTMLCollection of all descendant elements.\n\nOtherwise, returns a HTMLCollection of all descendant elements whose qualified name is qualifiedName. (Matches case-insensitively against elements in the HTML namespace within an HTML document.)",
    "document-getelementsbytagnamens": "If namespace and localName are \"*\" returns a HTMLCollection of all descendant elements.\n\nIf only namespace is \"*\" returns a HTMLCollection of all descendant elements whose local name is localName.\n\nIf only localName is \"*\" returns a HTMLCollection of all descendant elements whose namespace is namespace.\n\nOtherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.",
    "document-getelementsbyclassname": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
    "element-getelementsbyclassname": "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
    "document-createelement": "Returns an element with localName as local name (if document is an HTML document, localName gets lowercased). The element's namespace is the HTML namespace when document is an HTML document or document's content type is \"application/xhtml+xml\", and null otherwise.\n\nIf localName does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown.\n\nWhen supplied, options's is can be used to create a customized built-in element.",
    "document-createelementns": "Returns an element with namespace namespace. Its namespace prefix will be everything before \":\" (U+003E) in qualifiedName or null. Its local name will be everything after \":\" (U+003E) in qualifiedName or qualifiedName.\n\nIf localName does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown.\n\nIf one of the following conditions is true a \"NamespaceError\" DOMException will be thrown:\n\nlocalName does not match the QName production.\nNamespace prefix is not null and namespace is the empty string.\nNamespace prefix is \"xml\" and namespace is not the XML namespace.\nqualifiedName or namespace prefix is \"xmlns\" and namespace is not the XMLNS namespace.\nnamespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is \"xmlns\".\n\nWhen supplied, options's is can be used to create a customized built-in element.",
    "document-createdocumentfragment": "Returns a DocumentFragment node.",
    "document-createtextnode": "Returns a Text node whose data is data.",
    "document-createcdatasection": "Returns a CDATASection node whose data is data.",
    "document-createcomment": "Returns a Comment node whose data is data.",
    "document-createprocessinginstruction": "Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown. If data contains \"?>\" an \"InvalidCharacterError\" DOMException will be thrown.",
    "document-importnode": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.\n\nIf node is a document or a shadow root, throws a \"NotSupportedError\" DOMException.",
    "document-adoptnode": "Moves node from another document and returns it.\n\nIf node is a document, throws a \"NotSupportedError\" DOMException or, if node is a shadow root, throws a \"HierarchyRequestError\" DOMException.",
    "documentfragment-documentfragment": "Returns a new DocumentFragment node.",
    "element-namespaceuri": "Returns the namespace.",
    "element-prefix": "Returns the namespace prefix.",
    "element-localname": "Returns the local name.",
    "element-tagname": "Returns the HTML-uppercased qualified name.",
    "element-id": "Returns the value of element's id content attribute. Can be set to change it.",
    "element-classname": "Returns the value of element's class content attribute. Can be set to change it.",
    "element-classlist": "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
    "element-slot": "Returns the value of element's slot content attribute. Can be set to change it.",
    "element-hasattributes": "Returns true if element has attributes, and false otherwise.",
    "element-getattributenames": "Returns the qualified names of all element's attributes. Can contain duplicates.",
    "element-getattribute": "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
    "element-getattributens": "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
    "element-setattribute": "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
    "element-setattributens": "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
    "element-removeattribute": "Removes element's first attribute whose qualified name is qualifiedName.",
    "element-removeattributens": "Removes element's attribute whose namespace is namespace and local name is localName.",
    "element-toggleattribute": "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n\nReturns true if qualifiedName is now present, and false otherwise.",
    "element-hasattribute": "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
    "element-hasattributens": "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
    "element-attachshadow": "Creates a shadow root for element and returns it.",
    "element-shadowroot": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
    "element-closest": "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
    "element-matches": "Returns true if matching selectors against element's root yields element, and false otherwise.",
    "text-text": "Returns a new Text node whose data is data.",
    "text-splittext": "Splits data at the given offset and returns the remainder as Text node.",
    "text-wholetext": "Returns the combined data of all direct Text node siblings.",
    "comment-comment": "Returns a new Comment node whose data is data.",
    "abstractrange-startcontainer": "Returns range's start node.",
    "abstractrange-startoffset": "Returns range's start offset.",
    "abstractrange-endcontainer": "Returns range's end node.",
    "abstractrange-endoffset": "Returns range's end offset.",
    "abstractrange-collapsed": "Returns true if range is collapsed, and false otherwise.",
    "staticrange-staticrange": "Returns a new range object that does not update when the node tree mutates.",
    "range-range": "Returns a new live range.",
    "range-commonancestorcontainer": "Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node.",
    "range-comparepoint": "Returns โ1 if the point is before the range, 0 if the point is in the range, and 1 if the point is after the range.",
    "range-intersectsnode": "Returns whether range intersects node.",
    "domtokenlist-length": "Returns the number of tokens.",
    "domtokenlist-item": "Returns the token with index index.",
    "domtokenlist-contains": "Returns true if token is present, and false otherwise.",
    "domtokenlist-add": "Adds all arguments passed, except those already present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.",
    "domtokenlist-remove": "Removes arguments passed, if they are present.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.",
    "domtokenlist-toggle": "If force is not given, \"toggles\" token, removing it if it's present and adding it if it's not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).\n\nReturns true if token is now present, and false otherwise.\n\nThrows a \"SyntaxError\" DOMException if token is empty.\n\nThrows an \"InvalidCharacterError\" DOMException if token contains any spaces.",
    "domtokenlist-replace": "Replaces token with newToken.\n\nReturns true if token was replaced with newToken, and false otherwise.\n\nThrows a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n\nThrows an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.",
    "domtokenlist-supports": "Returns true if token is in the associated attribute's supported tokens. Returns false otherwise.\n\nThrows a TypeError if the associated attribute has no supported tokens defined.",
    "domtokenlist-value": "Returns the associated set as string.\n\nCan be set, to change the associated attribute.",
    "mutationobserverinit-childlist": "Set to true if mutations to target's children are to be observed.",
    "mutationobserverinit-attributes": "Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.",
    "mutationobserverinit-characterdata": "Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.",
    "mutationobserverinit-subtree": "Set to true if mutations to not just target, but also target's descendants are to be observed.",
    "mutationobserverinit-attributeoldvalue": "Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.",
    "mutationobserverinit-characterdataoldvalue": "Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.",
    "mutationobserverinit-attributefilter": "Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.",
    "node-element_node": "node is an element.",
    "node-text_node": "node is a Text node.",
    "node-cdata_section_node": "node is a CDATASection node.",
    "node-processing_instruction_node": "node is a ProcessingInstruction node.",
    "node-comment_node": "node is a Comment node.",
    "node-document_node": "node is a document.",
    "node-document_type_node": "node is a doctype.",
    "node-document_fragment_node": "node is a DocumentFragment node.",
    "node-document_position_disconnected": "Set when node and other are not in the same tree.",
    "node-document_position_preceding": "Set when other is preceding node.",
    "node-document_position_following": "Set when other is following node.",
    "node-document_position_contains": "Set when other is an ancestor of node.",
    "node-document_position_contained_by": "Set when other is a descendant of node."
}