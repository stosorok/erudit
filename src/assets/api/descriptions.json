{
    "ANGLE_instanced_arrays": "The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.",
    "AbortController": "The AbortController interface represents a controller object that allows you to abort one or more DOM requests as and when desired.",
    "AbortSignal": "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.",
    "AnalyserNode": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.",
    "AnimationEvent": "The AnimationEvent interface represents events providing information related to animations.",
    "Attr": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.",
    "AudioBuffer": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.",
    "AudioBufferSourceNode": "The AudioBufferSourceNode interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.",
    "AudioContext": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.",
    "AudioDestinationNode": "AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.",
    "AudioListener": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.",
    "AudioNode": "The AudioNode interface is a generic interface for representing an audio processing module. Examples include:",
    "AudioParam": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).",
    "AudioProcessingEvent": "The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.",
    "AudioTrack": "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>. ",
    "AudioTrackList": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
    "BeforeUnloadEvent": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded.",
    "BiquadFilterNode": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.",
    "Blob": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.",
    "ByteLengthQueuingStrategy": "The ByteLengthQueuingStrategy interface of the the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.",
    "CDATASection": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.",
    "CSS": "The CSS interface holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface.",
    "CSSConditionRule": "An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.",
    "CSSGroupingRule": "An object implementing the CSSGroupingRule interface represents any CSS at-rule that contains other rules nested within it.",
    "CSSKeyframeRule": "The CSSKeyframeRule interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).",
    "CSSKeyframesRule": "The CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).",
    "CSSMediaRule": "The CSSMediaRule is an interface representing a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).",
    "CSSNamespaceRule": "The CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).",
    "CSSPageRule": "CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).",
    "CSSRule": "The CSSRule interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.",
    "CSSRuleList": "A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.",
    "CSSStyleDeclaration": "The CSSStyleDeclaration interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.",
    "CSSStyleRule": "CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).",
    "CSSStyleSheet": "The CSSStyleSheet interface represents a single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.",
    "CSSSupportsRule": "The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).",
    "Cache": "The Cache interface provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.",
    "CacheStorage": "The CacheStorage interface represents the storage for Cache objects.",
    "CanvasGradient": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().",
    "CanvasPattern": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
    "CanvasRenderingContext2D": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
    "ChannelMergerNode": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
    "ChannelSplitterNode": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
    "CharacterData": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.",
    "Client": "The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get().",
    "Clients": "The Clients interface provides access to Client objects. Access it via self.clients within a service worker.",
    "ClipboardEvent": "The ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events.",
    "CloseEvent": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.",
    "Comment": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.",
    "CompositionEvent": "The DOM CompositionEvent represents events that occur due to the user indirectly entering text.",
    "Console": "The Console object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.",
    "ConvolverNode": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.",
    "Coordinates": "The Coordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.",
    "CountQueuingStrategy": "The CountQueuingStrategy interface of the the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.",
    "Crypto": "The Crypto interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.",
    "CryptoKey": "The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.",
    "CryptoKeyPair": "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.",
    "DOMError": "The DOMError interface describes an error object that contains an error name.",
    "DOMException": "The DOMException interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.",
    "DOMImplementation": "The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
    "DOMParser": "The DOMParser interface provides the ability to parse XML or HTML source code from a string into a DOM Document.",
    "DOMStringList": "A type returned by some APIs which contains a list of DOMString (strings).",
    "DOMStringMap": "Used by the dataset HTML attribute to represent data for custom attributes added to elements.",
    "DOMTokenList": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
    "DataTransfer": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
    "DataTransferItem": "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.",
    "DataTransferItemList": "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
    "DedicatedWorkerGlobalScope": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
    "DelayNode": "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.",
    "DeviceAcceleration": "A DeviceAcceleration object provides information about the amount of acceleration the device is experiencing along all three axes.",
    "DeviceLightEvent": "The DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability.",
    "DeviceMotionEvent": "The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.",
    "DeviceOrientationEvent": "The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.",
    "DeviceRotationRate": "A DeviceRotationRate object provides information about the rate at which the device is rotating around all three axes.",
    "Document": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
    "DocumentFragment": "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.",
    "DocumentType": "The DocumentType interface represents a Node containing a doctype.",
    "DragEvent": "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
    "DynamicsCompressorNode": "Inherits properties from its parent, AudioNode.",
    "EXT_frag_depth": "The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.",
    "EXT_texture_filter_anisotropic": "The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).",
    "Element": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
    "ErrorEvent": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.",
    "Event": "The Event interface represents an event which takes place in the DOM.",
    "EventTarget": "EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.",
    "ExtendableEvent": "The ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.",
    "ExtendableMessageEvent": "The ExtendableMessageEvent interface of the ServiceWorker API represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.",
    "FetchEvent": "This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch.",
    "File": "The File interface provides information about files and allows JavaScript in a web page to access their content.",
    "FileList": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
    "FileReader": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",
    "FileReaderSync": "The FileReaderSync interface allows to read File or Blob objects in a synchronous way.",
    "FocusEvent": "The FocusEvent interface represents focus-related events like focus, blur, focusin, or focusout.",
    "FormData": "The FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\".",
    "GainNode": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.",
    "Gamepad": "The Gamepad interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.",
    "GamepadButton": "The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.",
    "GamepadEvent": "The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.",
    "GamepadHapticActuator": "The GamepadHapticActuator interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.",
    "GamepadPose": "The GamepadPose interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information.)",
    "Geolocation": "The Geolocation interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.",
    "HTMLAnchorElement": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.",
    "HTMLAreaElement": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.",
    "HTMLAudioElement": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.",
    "HTMLBRElement": "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement.",
    "HTMLBaseElement": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
    "HTMLBaseFontElement": "The HTMLBaseFontElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <basefont> elements.",
    "HTMLBodyElement": "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.",
    "HTMLButtonElement": "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.",
    "HTMLCanvasElement": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
    "HTMLCollection": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",
    "HTMLDListElement": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.",
    "HTMLDataElement": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
    "HTMLDataListElement": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
    "HTMLDivElement": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.",
    "HTMLDocument": "The HTMLDocument property of Window objects is an alias that browsers expose for the Document interface object.",
    "HTMLElement": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
    "HTMLEmbedElement": "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
    "HTMLFieldSetElement": "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.",
    "HTMLFontElement": "Implements the document object model (DOM) representation of the font element. The HTML Font Element <font> defines the font size, font face and color of text.",
    "HTMLFormControlsCollection": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. ",
    "HTMLFormElement": "The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.",
    "HTMLFrameSetElement": "The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.",
    "HTMLHRElement": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
    "HTMLHeadElement": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
    "HTMLHeadingElement": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.",
    "HTMLHtmlElement": "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
    "HTMLIFrameElement": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
    "HTMLImageElement": "The HTMLImageElement interface provides special properties and methods for manipulating <img> elements.",
    "HTMLInputElement": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
    "HTMLLIElement": "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
    "HTMLLabelElement": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.",
    "HTMLLegendElement": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
    "HTMLLinkElement": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.",
    "HTMLMapElement": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
    "HTMLMarqueeElement": "The HTMLMarqueeElement interface provides methods to manipulate <marquee> elements.",
    "HTMLMediaElement": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.",
    "HTMLMetaElement": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
    "HTMLMeterElement": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
    "HTMLModElement": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
    "HTMLOListElement": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
    "HTMLObjectElement": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
    "HTMLOptGroupElement": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
    "HTMLOptionElement": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.",
    "HTMLOptionsCollection": "HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the \"options\" property of select.",
    "HTMLOutputElement": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
    "HTMLParagraphElement": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
    "HTMLParamElement": "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
    "HTMLPictureElement": "The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods.",
    "HTMLPreElement": "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).",
    "HTMLProgressElement": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
    "HTMLQuoteElement": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
    "HTMLScriptElement": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
    "HTMLSelectElement": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
    "HTMLSourceElement": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
    "HTMLSpanElement": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
    "HTMLStyleElement": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
    "HTMLTableCaptionElement": "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
    "HTMLTableCellElement": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
    "HTMLTableColElement": "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
    "HTMLTableElement": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
    "HTMLTableRowElement": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
    "HTMLTableSectionElement": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
    "HTMLTemplateElement": "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element.",
    "HTMLTextAreaElement": "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements.",
    "HTMLTimeElement": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
    "HTMLTitleElement": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
    "HTMLTrackElement": "The HTMLTrackElement",
    "HTMLUListElement": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
    "HTMLUnknownElement": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
    "HTMLVideoElement": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
    "HashChangeEvent": "The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.",
    "Headers": "The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.",
    "History": "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
    "IDBCursor": "The IDBCursor interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.",
    "IDBCursorWithValue": "The IDBCursorWithValue interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.",
    "IDBDatabase": "The IDBDatabase interface of the IndexedDB API provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.",
    "IDBFactory": "In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)",
    "IDBIndex": "IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.",
    "IDBKeyRange": "A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:",
    "IDBObjectStore": "This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)",
    "IDBOpenDBRequest": "Also inherits methods from its parents IDBRequest and EventTarget.",
    "IDBRequest": "The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.",
    "IDBVersionChangeEvent": "The IDBVersionChangeEvent interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.",
    "IIRFilterNode": "The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.",
    "ImageData": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
    "IntersectionObserver": "provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.",
    "IntersectionObserverEntry": "The IntersectionObserverEntry interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.",
    "KeyboardEvent": "KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.",
    "Location": "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
    "MSGestureEvent": "The MSGestureEvent is a proprietary interface specific to Internet Explorer and Microsoft Edge which represents events that occur due to touch gestures. Events using this interface include MSGestureStart, MSGestureEnd, MSGestureTap, MSGestureHold, MSGestureChange, and MSInertiaStart.",
    "MSGraphicsTrust": "The msGraphicsTrust() constructor returns an object that provides properties for info on protected video playback.",
    "MediaDeviceInfo": "The MediaDevicesInfo interface contains information that describes a single media input or output device.",
    "MediaDevices": "The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.",
    "MediaElementAudioSourceNode": "A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.",
    "MediaError": "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.",
    "MediaKeyMessageEvent": "The MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.",
    "MediaKeySession": "The MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).",
    "MediaKeyStatusMap": "The MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.",
    "MediaKeySystemAccess": "The MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.",
    "MediaKeys": "The MediaKeys interface of EncryptedMediaExtensions API the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.",
    "MediaQueryList": "A MediaQueryList object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).",
    "MediaSource": "The MediaSource interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.",
    "MediaStream": "The MediaStream interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.",
    "MediaStreamAudioSourceNode": "The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.",
    "MediaStreamEvent": "The MediaStreamEvent interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream.",
    "MediaStreamTrack": "The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.",
    "MediaStreamTrackEvent": "The MediaStreamTrackEvent interface represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.",
    "MessageChannel": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
    "MessageEvent": "The MessageEvent interface represents a message received by a target object.",
    "MessagePort": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.",
    "MimeType": "The MimeType interface provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object.",
    "MimeTypeArray": "The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes.",
    "MouseEvent": "The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.",
    "MutationEvent": "The MutationEvent interface provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.",
    "MutationObserver": "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.",
    "MutationRecord": "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.",
    "NamedNodeMap": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
    "Navigator": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
    "Node": "Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.",
    "NodeFilter": "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.",
    "NodeIterator": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
    "NodeList": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
    "Notification": "The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.",
    "NotificationEvent": "The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.",
    "OES_element_index_uint": "The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().",
    "OES_standard_derivatives": "The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.",
    "OES_texture_float": "The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.",
    "OES_texture_float_linear": "The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.",
    "OES_texture_half_float": "The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.",
    "OES_texture_half_float_linear": "The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.",
    "OfflineAudioCompletionEvent": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.",
    "OfflineAudioContext": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
    "OscillatorNode": "The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.",
    "PageTransitionEvent": "The PageTransitionEvent is fired when a document is being loaded or unloaded.",
    "PannerNode": "A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!",
    "Path2D": "The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
    "PaymentAddress": "The PaymentAddress interface of the Payment Request API is used to store shipping or payment address information.",
    "PaymentRequest": "The PaymentRequest interface of the Payment Request API is the primary access point into the API, and lets web content and apps accept payments from the end user.",
    "PaymentRequestUpdateEvent": "The PaymentRequestUpdateEvent interface of the the Payment Request API enables a web page to update the details of a PaymentRequest in response to a user action.",
    "PaymentResponse": "The PaymentResponse interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.",
    "Performance": "The Performance interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.",
    "PerformanceEntry": "The PerformanceEntry object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).",
    "PerformanceMark": "PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \"mark\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.",
    "PerformanceMeasure": "PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \"measure\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.",
    "PerformanceNavigation": "The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done.",
    "PerformanceNavigationTiming": "The PerformanceNavigationTiming interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.",
    "PerformanceResourceTiming": "The PerformanceResourceTiming interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.",
    "PerformanceTiming": "The PerformanceTiming interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property.",
    "PeriodicWave": "PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().",
    "Plugin": "The Plugin interface provides information about a browser plugin.",
    "PluginArray": "The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods.",
    "PointerEvent": "The PointerEvent interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.",
    "PopStateEvent": "PopStateEvent is an event handler for the popstate event on the window.",
    "Position": "The Position interface represents the position of the concerned device at a given time. The position, represented by a Coordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.",
    "PositionError": "The PositionError interface represents the reason of an error occurring when using the geolocating device.",
    "ProcessingInstruction": "A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.",
    "ProgressEvent": "The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).",
    "PushEvent": "The PushEvent interface of the Push API represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.",
    "PushManager": "The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.",
    "PushMessageData": "The PushMessageData interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.",
    "PushSubscription": "The PushSubscription interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.",
    "RTCDTMFToneChangeEvent": "The RTCDTMFToneChangeEvent interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.",
    "RTCIceCandidate": "The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.",
    "RTCIceTransport": "The RTCIceTransport interface provides access to information about the ICE transport layer over which the data is being sent and received.",
    "RTCPeerConnection": "The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.",
    "RTCPeerConnectionIceEvent": "The RTCPeerConnectionIceEvent interface represents events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.",
    "RTCRtpReceiver": "The RTCRtpReceiver interface of the the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.",
    "RTCRtpSender": "The RTCRtpSender interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.",
    "RTCSessionDescription": "The RTCSessionDescription interface describes one end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.",
    "Range": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
    "ReadableStream": "The ReadableStream interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.",
    "Request": "The Request interface of the Fetch API represents a resource request.",
    "Response": "The Response interface of the Fetch API represents the response to a request.",
    "SVGAElement": "The SVGAElement interface provides access to the properties of <a> element, as well as methods to manipulate them.",
    "SVGAngle": "The SVGAngle interface is used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.",
    "SVGAnimatedAngle": "The SVGAnimatedAngle interface is used for attributes of basic type <angle> which can be animated.",
    "SVGAnimatedBoolean": "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.",
    "SVGAnimatedEnumeration": "The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.",
    "SVGAnimatedInteger": "The SVGAnimatedInteger interface is used for attributes of basic type <integer> which can be animated.",
    "SVGAnimatedLength": "The SVGAnimatedLength interface is used for attributes of basic type <length> which can be animated.",
    "SVGAnimatedLengthList": "The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.",
    "SVGAnimatedNumber": "The SVGAnimatedNumber interface is used for attributes of basic type <Number> which can be animated.",
    "SVGAnimatedNumberList": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.",
    "SVGAnimatedPreserveAspectRatio": "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.",
    "SVGAnimatedRect": "The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.",
    "SVGAnimatedString": "The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.",
    "SVGAnimatedTransformList": "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.",
    "SVGCircleElement": "The SVGCircleElement interface is an interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.",
    "SVGClipPathElement": "The SVGClipPathElement interface provides access to the properties of <clipPath> elements, as well as methods to manipulate them.",
    "SVGComponentTransferFunctionElement": "The SVGComponentTransferFunctionElement interface defines a base interface used by the component transfer function interfaces.",
    "SVGDefsElement": "The SVGDefsElement interface corresponds to the <defs> element.",
    "SVGDescElement": "The SVGDescElement interface corresponds to the <desc> element.",
    "SVGElement": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.",
    "SVGEllipseElement": "The SVGEllipseElement interface provides access to the properties of <ellipse> elements.",
    "SVGFEBlendElement": "The SVGFEBlendElement interface corresponds to the <feBlend> element.",
    "SVGFEColorMatrixElement": "The SVGFEColorMatrixElement interface corresponds to the <feColorMatrix> element.",
    "SVGFEComponentTransferElement": "The SVGFEComponentTransferElement interface corresponds to the <feComponentTransfer> element.",
    "SVGFECompositeElement": "The SVGFECompositeElement interface corresponds to the <feComposite> element.",
    "SVGFEConvolveMatrixElement": "The SVGFEConvolveMatrixElement interface corresponds to the <feConvolveMatrix> element.",
    "SVGFEDiffuseLightingElement": "The SVGFEDiffuseLightingElement interface corresponds to the <feDiffuseLighting> element.",
    "SVGFEDisplacementMapElement": "The SVGFEDisplacementMapElement interface corresponds to the <feDisplacementMap> element.",
    "SVGFEDistantLightElement": "The SVGFEDistantLightElement interface corresponds to the <feDistantLight> element.",
    "SVGFEFloodElement": "The SVGFEFloodElement interface corresponds to the <feFlood> element.",
    "SVGFEFuncAElement": "The SVGFEFuncAElement interface corresponds to the <feFuncA> element.",
    "SVGFEFuncBElement": "The SVGFEFuncBElement interface corresponds to the <feFuncB> element.",
    "SVGFEFuncGElement": "The SVGFEFuncGElement interface corresponds to the <feFuncG> element.",
    "SVGFEFuncRElement": "The SVGFEFuncRElement interface corresponds to the <feFuncR> element.",
    "SVGFEGaussianBlurElement": "The SVGFEGaussianBlurElement interface corresponds to the <feGaussianBlur> element.",
    "SVGFEImageElement": "The SVGFEImageElement interface corresponds to the <feImage> element.",
    "SVGFEMergeElement": "The SVGFEMergeElement interface corresponds to the <feMerge> element.",
    "SVGFEMergeNodeElement": "The SVGFEMergeNodeElement interface corresponds to the <feMergeNode> element.",
    "SVGFEMorphologyElement": "The SVGFEMorphologyElement interface corresponds to the <feMorphology> element.",
    "SVGFEOffsetElement": "The SVGFEOffsetElement interface corresponds to the <feOffset> element.",
    "SVGFEPointLightElement": "The SVGFEPointLightElement interface corresponds to the <fePointLight> element.",
    "SVGFESpecularLightingElement": "The SVGFESpecularLightingElement interface corresponds to the <feSpecularLighting> element.",
    "SVGFESpotLightElement": "The SVGFESpotLightElement interface corresponds to the <feSpotLight> element.",
    "SVGFETileElement": "The SVGFETileElement interface corresponds to the <feTile> element.",
    "SVGFETurbulenceElement": "The SVGFETurbulenceElement interface corresponds to the <feTurbulence> element.",
    "SVGFilterElement": "The SVGFilterElement interface provides access to the properties of <filter> elements, as well as methods to manipulate them.",
    "SVGForeignObjectElement": "The SVGForeignObjectElement interface provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.",
    "SVGGElement": "The SVGGElement interface corresponds to the <g> element.",
    "SVGGradientElement": "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.",
    "SVGGraphicsElement": "The SVGGraphicsElement interface represents SVG elements whose primary purpose is to directly render graphics into a group.",
    "SVGImageElement": "The SVGImageElement interface corresponds to the <image> element.",
    "SVGLength": "The SVGLength interface correspond to the <length> basic data type.",
    "SVGLengthList": "The SVGLengthList defines a list of SVGLength objects.",
    "SVGLineElement": "The SVGLineElement interface provides access to the properties of <line> elements, as well as methods to manipulate them.",
    "SVGLinearGradientElement": "The SVGLinearGradientElement interface corresponds to the <linearGradient> element.",
    "SVGMaskElement": "The SVGMaskElement interface provides access to the properties of <mask> elements, as well as methods to manipulate them.",
    "SVGMetadataElement": "The SVGMetadataElement interface corresponds to the <metadata> element.",
    "SVGNumber": "The SVGNumber interface corresponds to the <number> basic data type.",
    "SVGNumberList": "The SVGNumberList defines a list of SVGNumber objects.",
    "SVGPathElement": "The SVGPathElement interface corresponds to the <path> element.",
    "SVGPatternElement": "The SVGPatternElement interface corresponds to the <pattern> element.",
    "SVGPoint": "An SVGPoint represents a 2D or 3D point in the SVG coordinate system.",
    "SVGPolygonElement": "The SVGPolygonElement interface provides access to the properties of <polygon> elements, as well as methods to manipulate them.",
    "SVGPolylineElement": "The SVGPolylineElement interface provides access to the properties of <polyline> elements, as well as methods to manipulate them.",
    "SVGPreserveAspectRatio": "The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.",
    "SVGRadialGradientElement": "The SVGRadialGradientElement interface corresponds to the <RadialGradient> element.",
    "SVGRect": "The SVGRect represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.",
    "SVGRectElement": "The SVGRectElement interface provides access to the properties of <rect> elements, as well as methods to manipulate them.",
    "SVGSVGElement": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
    "SVGScriptElement": "The SVGScriptElement interface corresponds to the SVG <script> element.",
    "SVGStopElement": "The SVGStopElement interface corresponds to the <stop> element.",
    "SVGStringList": "The SVGStringList defines a list of DOMString objects.",
    "SVGStyleElement": "The SVGStyleElement interface corresponds to the SVG <style> element.",
    "SVGSwitchElement": "The SVGSwitchElement interface corresponds to the <switch> element.",
    "SVGSymbolElement": "The SVGSymbolElement interface corresponds to the <symbol> element.",
    "SVGTSpanElement": "The SVGTSpanElement interface represents a <tspan> element.",
    "SVGTextContentElement": "The SVGTextContentElement interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.",
    "SVGTextElement": "The SVGTextElement interface corresponds to the <text> elements.",
    "SVGTextPathElement": "The SVGTextPathElement interface corresponds to the <textPath> element.",
    "SVGTextPositioningElement": "The SVGTextPositioningElement interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.",
    "SVGTitleElement": "The SVGTitleElement interface corresponds to the <title> element.",
    "SVGTransform": "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.",
    "SVGTransformList": "The SVGTransformList defines a list of SVGTransform objects.",
    "SVGUnitTypes": "The SVGUnitTypes interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.",
    "SVGUseElement": "The SVGUseElement interface corresponds to the <use> element.",
    "SVGViewElement": "The SVGViewElement interface provides access to the properties of <view> elements, as well as methods to manipulate them.",
    "SVGZoomAndPan": "The SVGZoomAndPan interface is used to reflect the zoomAndPan attribute, and is mixed in to other interfaces for elements that support this attribute.",
    "Screen": "The Screen interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.",
    "ScriptProcessorNode": "The ScriptProcessorNode interface allows the generation, processing, or analyzing of audio using JavaScript.",
    "SecurityPolicyViolationEvent": "The SecurityPolicyViolationEvent interface inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.",
    "Selection": "A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection().",
    "ServiceWorker": "The ServiceWorker interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.",
    "ServiceWorkerContainer": "The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.",
    "ServiceWorkerGlobalScope": "The ServiceWorkerGlobalScope interface of the ServiceWorker API represents the global execution context of a service worker.",
    "ServiceWorkerMessageEvent": "The ServiceWorkerMessageEvent interface of the ServiceWorker API contains information about an event sent to a ServiceWorkerContainer target. This extends the default message event to allow setting a ServiceWorker object as the source of a message. The event object is accessed via the handler function of a message event, when fired by a message received from a service worker.",
    "ServiceWorkerRegistration": "The ServiceWorkerRegistration interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.",
    "SourceBuffer": "The SourceBuffer interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.",
    "SourceBufferList": "The SourceBufferList interface represents a simple container list for multiple SourceBuffer objects.",
    "SpeechSynthesis": "The SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.",
    "SpeechSynthesisEvent": "The SpeechSynthesisEvent interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.",
    "SpeechSynthesisUtterance": "The SpeechSynthesisUtterance interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)",
    "SpeechSynthesisVoice": "The SpeechSynthesisVoice interface of the Web Speech API represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.",
    "StereoPannerNode": "The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.",
    "Storage": "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
    "StorageEvent": "A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.",
    "StyleSheet": "An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.",
    "StyleSheetList": "The StyleSheetList interface represents a list of StyleSheet.",
    "SubtleCrypto": "The SubtleCrypto interface of the Web Crypto API provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).",
    "SyncEvent": "The SyncEvent interface represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. ",
    "SyncManager": "The SyncManager interface of the the ServiceWorker API provides an interface for registering and listing sync registrations.",
    "Text": "The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.",
    "TextDecoder": "The TextDecoder interface represents a decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.",
    "TextEncoder": "TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.",
    "TextMetrics": "The TextMetrics interface represents the dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.",
    "TextTrack": "This interface also inherits properties from EventTarget.",
    "TextTrackCue": "TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used.",
    "TimeRanges": "The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.",
    "Touch": "The Touch interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.",
    "TouchEvent": "The TouchEvent interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.",
    "TouchList": "The TouchList interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.",
    "TrackEvent": "The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack.",
    "TransitionEvent": "The TransitionEvent interface represents events providing information related to transitions.",
    "TreeWalker": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
    "UIEvent": "The UIEvent interface represents simple user interface events.",
    "URL": "The URL interface represents an object providing static methods used for creating object URLs.",
    "VRDisplay": "The VRDisplay interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.",
    "VRDisplayCapabilities": "The VRDisplayCapabilities interface of the WebVR API describes the capabilities of a VRDisplay — its features can be used to perform VR device capability tests, for example can it return position information.",
    "VRDisplayEvent": "The VRDisplayEvent interface of the WebVR API represents represents the event object of WebVR-related events (see the list of WebVR window extensions).",
    "VREyeParameters": "The VREyeParameters interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.",
    "VRFieldOfView": "The VRFieldOfView interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.",
    "VRFrameData": "The VRFrameData interface of the WebVR API represents all the information needed to render a single frame of a VR scene; constructed by VRDisplay.getFrameData().",
    "VRPose": "The VRPose interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)",
    "ValidityState": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
    "VideoPlaybackQuality": "A VideoPlaybackQuality object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.",
    "VideoTrack": "The VideoTrack interface represents a single video track from a <video> element.",
    "VideoTrackList": "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.",
    "WEBGL_compressed_texture_s3tc": "The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.",
    "WEBGL_debug_renderer_info": "The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.",
    "WEBGL_depth_texture": "The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.",
    "WaveShaperNode": "A WaveShaperNode always has exactly one input and one output.",
    "WebGLActiveInfo": "The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.",
    "WebGLBuffer": "The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.",
    "WebGLContextEvent": "The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.",
    "WebGLFramebuffer": "The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.",
    "WebGLProgram": "The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).",
    "WebGLRenderbuffer": "The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.",
    "WebGLRenderingContext": "The WebGLRenderingContext interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.",
    "WebGLShader": "The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.",
    "WebGLShaderPrecisionFormat": "The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.",
    "WebGLTexture": "The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.",
    "WebGLUniformLocation": "The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.",
    "WebSocket": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
    "WheelEvent": "The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.",
    "Window": "The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.",
    "WindowClient": "The WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.",
    "Worker": "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.",
    "WorkerGlobalScope": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
    "WorkerLocation": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.",
    "WorkerNavigator": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.",
    "WritableStream": "The WritableStream interface of the the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.",
    "WritableStreamDefaultController": "The WritableStreamDefaultController interface of the the Streams API represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.",
    "WritableStreamDefaultWriter": "The WritableStreamDefaultWriter interface of the the Streams API is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.",
    "XMLDocument": "The XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
    "XMLHttpRequest": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.",
    "XMLSerializer": "The XMLSerializer interface provides the serializeToString() method to construct an XML string representing a DOM tree.",
    "XPathEvaluator": "The XPathEvaluator interface allows to compile and evaluate XPath expressions.",
    "XPathExpression": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree.",
    "XPathNSResolver": "The XPathNSResolver interface permits prefix strings in an XPath expression to be properly bound to namespace URI strings.",
    "XPathResult": "The XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.",
    "XSLTProcessor": "An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents."
  }