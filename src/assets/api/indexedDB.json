{
    "idbrequest-result": "When a request is completed, returns the result, or undefined if the request failed. Throws a \"InvalidStateError\" DOMException if the request is still pending.",
    "idbrequest-error": "When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \"InvalidStateError\" DOMException if the request is still pending.",
    "idbrequest-source": "Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.",
    "idbrequest-transaction": "Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.",
    "idbrequest-readystate": "Returns \"pending\" until a request is complete, then returns \"done\".",
    "idbfactory-open": "Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.",
    "idbfactory-deletedatabase": "Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.",
    "idbfactory-cmp": "Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\n\nThrows a \"DataError\" DOMException if either input is not a valid key.",
    "idbdatabase-name": "Returns the name of the database.",
    "idbdatabase-version": "Returns the version of the database.",
    "idbdatabase-objectstorenames": "Returns a list of the names of object stores in the database.",
    "idbdatabase-createobjectstore": "Creates a new object store with the given name and options and returns a new IDBObjectStore.\n\nThrows a \"InvalidStateError\" DOMException if not called within an upgrade transaction.",
    "idbdatabase-deleteobjectstore": "Deletes the object store with the given name.\n\nThrows a \"InvalidStateError\" DOMException if not called within an upgrade transaction.",
    "idbdatabase-transaction": "Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names.",
    "idbdatabase-close": "Closes the connection once all running transactions have finished.",
    "idbobjectstore-name": "Returns the name of the store.",
    "idbobjectstore-keypath": "Returns the key path of the store, or null if none.",
    "idbobjectstore-indexnames": "Returns a list of the names of indexes in the store.",
    "idbobjectstore-transaction": "Returns the associated transaction.",
    "idbobjectstore-autoincrement": "Returns true if the store has a key generator, and false otherwise.",
    "idbobjectstore-put": "Adds or updates a record in store with the given value and key.\n\nIf the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n\nIf put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n\nIf successful, request's result will be the record's key.",
    "idbobjectstore-add": "Adds or updates a record in store with the given value and key.\n\nIf the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n\nIf put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n\nIf successful, request's result will be the record's key.",
    "idbobjectstore-delete": "Deletes records in store with the given key or in the given key range in query.\n\nIf successful, request's result will be undefined.",
    "idbobjectstore-clear": "Deletes all records in store.\n\nIf successful, request's result will be undefined.",
    "idbobjectstore-get": "Retrieves the value of the first record matching the given key or key range in query.\n\nIf successful, request's result will be the value, or undefined if there was no matching record.",
    "idbobjectstore-getkey": "Retrieves the key of the first record matching the given key or key range in query.\n\nIf successful, request's result will be the key, or undefined if there was no matching record.",
    "idbobjectstore-getall": "Retrieves the values of the records matching the given key or key range in query (up to count if given).\n\nIf successful, request's result will be an Array of the values.",
    "idbobjectstore-getallkeys": "Retrieves the keys of records matching the given key or key range in query (up to count if given).\n\nIf successful, request's result will be an Array of the keys.",
    "idbobjectstore-count": "Retrieves the number of records matching the given key or key range in query.\n\nIf successful, request's result will be the count.",
    "idbobjectstore-opencursor": "Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\n\nIf successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.",
    "idbobjectstore-openkeycursor": "Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\n\nIf successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.",
    "idbobjectstore-createindex": "Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n\nThrows an \"InvalidStateError\" DOMException if not called within an upgrade transaction.",
    "idbobjectstore-deleteindex": "Deletes the index in store with the given name.\n\nThrows an \"InvalidStateError\" DOMException if not called within an upgrade transaction.",
    "idbindex-name": "Returns the name of the index.",
    "idbindex-objectstore": "Returns the IDBObjectStore the index belongs to.",
    "idbindex-get": "Retrieves the value of the first record matching the given key or key range in query.\n\nIf successful, request's result will be the value, or undefined if there was no matching record.",
    "idbindex-getkey": "Retrieves the key of the first record matching the given key or key range in query.\n\nIf successful, request's result will be the key, or undefined if there was no matching record.",
    "idbindex-getall": "Retrieves the values of the records matching the given key or key range in query (up to count if given).\n\nIf successful, request's result will be an Array of the values.",
    "idbindex-getallkeys": "Retrieves the keys of records matching the given key or key range in query (up to count if given).\n\nIf successful, request's result will be an Array of the keys.",
    "idbindex-count": "Retrieves the number of records matching the given key or key range in query.\n\nIf successful, request's result will be the count.",
    "idbindex-opencursor": "Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\n\nIf successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.",
    "idbindex-openkeycursor": "Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\n\nIf successful, request's result will be an IDBCursor, or null if there were no matching records.",
    "idbkeyrange-lower": "Returns lower bound, or undefined if none.",
    "idbkeyrange-upper": "Returns upper bound, or undefined if none.",
    "idbkeyrange-loweropen": "Returns true if the lower open flag is set, and false otherwise.",
    "idbkeyrange-upperopen": "Returns true if the upper open flag is set, and false otherwise.",
    "idbkeyrange-only": "Returns a new IDBKeyRange spanning only key.",
    "idbkeyrange-lowerbound": "Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.",
    "idbkeyrange-upperbound": "Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.",
    "idbkeyrange-bound": "Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.",
    "idbkeyrange-includes": "Returns true if key is included in the range, and false otherwise.",
    "idbcursor-source": "Returns the IDBObjectStore or IDBIndex the cursor was opened from.",
    "idbcursor-direction": "Returns the direction (\"next\", \"nextunique\", \"prev\" or \"prevunique\") of the cursor.",
    "idbcursor-key": "Returns the key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished.",
    "idbcursor-primarykey": "Returns the effective key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished.",
    "idbcursor-advance": "Advances the cursor through the next count records in range.",
    "idbcursor-continue": "Advances the cursor to the next record in range.",
    "idbcursor-continueprimarykey": "Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \"InvalidAccessError\" DOMException if the source is not an index.",
    "idbcursor-update": "Updated the record pointed at by the cursor with a new value.\n\nThrows a \"DataError\" DOMException if the effective object store uses in-line keys and the key would have changed.\n\nIf successful, request's result will be the record's key.",
    "idbcursor-delete": "Delete the record pointed at by the cursor with a new value.\n\nIf successful, request's result will be undefined.",
    "idbcursorwithvalue-value": "Returns the cursor's current value.",
    "idbtransaction-objectstorenames": "Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.",
    "idbtransaction-mode": "Returns the mode the transaction was created with (\"readonly\" or \"readwrite\"), or \"versionchange\" for an upgrade transaction.",
    "idbtransaction-db": "Returns the transaction's connection.",
    "idbtransaction-error": "If the transaction was aborted, returns the error (a DOMException) providing the reason.",
    "idbtransaction-objectstore": "Returns an IDBObjectStore in the transaction's scope.",
    "idbtransaction-abort": "Aborts the transaction. All pending requests will fail with a \"AbortError\" DOMException and all changes made to the database will be reverted."
}